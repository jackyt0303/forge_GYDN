import 'dotenv/config';
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { z } from "zod";
import { convertADFtoString } from '../utils/adfReader'; // Assuming this path is correct

const selectedModel = 'gemini-2.0-flash' 

// Initialize the Google GenAI model through Langchain
// Note: Ensure GEMINI_API_KEY is set in your .env for ChatGoogleGenerativeAI
const model = new ChatGoogleGenerativeAI({
    apiKey: process.env.GOOGLE_API_KEY, 
    modelName: selectedModel, // Use a valid and current model name recognized by Langchain
    temperature: 0.1, // Lower temperature for more deterministic structured output
});

export const getActualValueWithLangchain = async (customFields, mappedFields, template) => {
    console.log("Langchain: Original template object:", template);
    console.log("Langchain: Original target set:", customFields);
    if (mappedFields) {
        console.log("Langchain: ADF description object received:", mappedFields["description"]);
    }

    const actualDescription = mappedFields["description"] ? convertADFtoString(mappedFields["description"]) : 'null';

    const prompt =`
        You are an Atlassian Jira template field mapping assistant.
        
        You will be given a target set and a set of field values, including a specific field value named "description".\n

        Target Set Description:
        A target set will always have key-value pairs, key will be the user's preferred key name, for example: "summary", which you need to keep as it is, 
        and the value will be a "field ID", highlighted as this: "\${fieldId}", which you need to map and replace it with actual value later on. 
        This is the value of the target set now: ${customFields}.\n

        Issue Value Set Description:
        For the set of field values, i called it "issue value set", it is in stringified JSON format, the key here is the field Id, it is the same as the field ID in the target set,
        which are used to match with the field ID in the target set, 
        and the value here is the actual field value, which is the actual value you need to extract and replace it with the field ID in the target set.
        The current issue value set is: ${JSON.stringify(mappedFields)}.\n

        "description" Field Description:
        In the issue value set, there is a field called "description", the value is: ${actualDescription}.\n
        This field, description, have a special role, which is it contains the overall description of the main issue, including unique information about the main context of an issue,
        you can found some field values in the description, do use the value in description as second opinion other than the issue value set when you perform the upcoming task.

        Task:
        Your task is: 
        1. First extract the actual value from Issue Value Set, 
        2. Then, replace the actual value in Target Set.
        3. Finally, return the completed Target in my provided schema, which is mentioned later.

        The reason for this task is, in the issue value set, the field name are accurate as the template, but the value is not conssistent,
        sometime it will be a string, more often it will be wrapped in an object or array, containing extra context about the field. 
        `+
        "Follow these specific extraction rules:\n" +
        "1. If a value is a string, use it directly.\n" +
        "2. If a value is an object containing a 'value' key (e.g., for Jira select lists), use the content of the 'value' key.\n" +
        "3. If a value is an object representing a user (often containing 'displayName' or 'name'), extract the 'displayName' or 'name'.\n" +
        "4. If a value is an array of user objects, extract the 'displayName' (or 'name') of the first user. If multiple users and appropriate, consider a comma-separated list of displayNames.\n" +
        "5. If a value is a date-time string (e.g., '2023-10-01T00:00:00.000+0000'), format it as 'YYYY-MM-DD'.\n" +
        "6. For Atlassian Document Format (ADF) JSON, it will be pre-converted to a plain string; use that plain string.\n" ;

        
        const outputSchemaKeyValue = z.record(
            z.string(), // All keys will be strings
            z.string().array()  // All values will be strings
        ).describe(
            `
            An object containing key-value pairs generated by the LLM.
            The keys are field names extracted from the template, and the values are arrays of strings.
            For example, if a field's value in the input is an object like { value: 'ActualData', id: '123' },
            the output for that field should be 'ActualData'.
        `)

        const structuredLLM = model.withStructuredOutput(outputSchemaKeyValue);

    try {
        const result = await structuredLLM.invoke(prompt);
        console.log('Langchain: LLM response:', result);
        return result;
    } catch (error) {
        console.error("Langchain: Error invoking chain or parsing LLM response:", error);
        return null;
    }
};
